///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 23.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// Ensure that the interface encoding is set to locale encoding by calling
// SetHcppInterfaceStringEncodingIsUtf8(false) at the beginning of the program.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////

#include "HalconCpp.h"
#include "HDevThread.h"



using namespace HalconCpp;

extern void gen_cam_par_area_scan_division (HTuple hv_Focus, HTuple hv_Kappa, HTuple hv_Sx, 
    HTuple hv_Sy, HTuple hv_Cx, HTuple hv_Cy, HTuple hv_ImageWidth, HTuple hv_ImageHeight, 
    HTuple *hv_CameraParam);


// Chapter: Calibration / Camera Parameters
// Short Description: Estimate the camera parameters of a 3D sensor. 
void estimate_camera_parameters_from_object_model_3d (HTuple hv_ObjectModel3D, HTuple *hv_CameraParam, 
    HTuple *hv_CameraPose)
{

  // Local iconic variables

  // Local control variables
  HTuple  hv_XCoords, hv_YCoords, hv_ZCoords, hv_Rows;
  HTuple  hv_Columns, hv_MappingSize, hv_Width, hv_Height;
  HTuple  hv_CameraParamStart, hv_CameraPoseStart, hv_CalibDataID;
  HTuple  hv_Error;

  //
  //This procedure estimates the camera parameters of a 3D sensor.
  //The camera parameters and the camera pose are found such that
  //the observed 3D points are projected onto their original 2D
  //image coordinates.
  //
  //Note that the 3D points must be distributed throughout the
  //relevant volume. If for example all 3D points lie on a single
  //plane, the calibration will be less accurate.
  //
  //The resulting camera parameters and pose can be used to project
  //matching results into the range images.
  //
  //Get 3D coordinates.
  GetObjectModel3dParams(hv_ObjectModel3D, "point_coord_x", &hv_XCoords);
  GetObjectModel3dParams(hv_ObjectModel3D, "point_coord_y", &hv_YCoords);
  GetObjectModel3dParams(hv_ObjectModel3D, "point_coord_z", &hv_ZCoords);
  //Get 2D coordinates.
  GetObjectModel3dParams(hv_ObjectModel3D, "mapping_row", &hv_Rows);
  GetObjectModel3dParams(hv_ObjectModel3D, "mapping_col", &hv_Columns);
  //Start camera parameters.
  GetObjectModel3dParams(hv_ObjectModel3D, "mapping_size", &hv_MappingSize);
  hv_Width = ((const HTuple&)hv_MappingSize)[0];
  hv_Height = ((const HTuple&)hv_MappingSize)[1];
  gen_cam_par_area_scan_division(0.012, 0, 5.2e-006, 5.2e-006, hv_Width/2, hv_Height/2, 
      hv_Width, hv_Height, &hv_CameraParamStart);
  hv_CameraPoseStart.Clear();
  hv_CameraPoseStart[0] = 0;
  hv_CameraPoseStart[1] = 0;
  hv_CameraPoseStart[2] = 0;
  hv_CameraPoseStart[3] = 0;
  hv_CameraPoseStart[4] = 0;
  hv_CameraPoseStart[5] = 0;
  hv_CameraPoseStart[6] = 0;
  //Calibrate the sensor.
  CreateCalibData("calibration_object", 1, 1, &hv_CalibDataID);
  SetCalibDataCalibObject(hv_CalibDataID, 0, (hv_XCoords.TupleConcat(hv_YCoords)).TupleConcat(hv_ZCoords));
  SetCalibDataCamParam(hv_CalibDataID, 0, "area_scan_division", hv_CameraParamStart);
  SetCalibDataObservPoints(hv_CalibDataID, 0, 0, 0, hv_Rows, hv_Columns, "all", hv_CameraPoseStart);
  CalibrateCameras(hv_CalibDataID, &hv_Error);
  GetCalibData(hv_CalibDataID, "camera", 0, "params", &(*hv_CameraParam));
  GetCalibData(hv_CalibDataID, "calib_obj_pose", (HTuple(0).Append(0)), "pose", &(*hv_CameraPose));
  return;
}
