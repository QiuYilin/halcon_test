///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 23.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// Ensure that the interface encoding is set to locale encoding by calling
// SetHcppInterfaceStringEncodingIsUtf8(false) at the beginning of the program.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////

#include "HalconCpp.h"
#include "HDevThread.h"



using namespace HalconCpp;


// Chapter: System / Operating System
// Short Description: Estimate the remaining time for a task given the current progress. 
void estimate_progress (HTuple hv_SecondsStart, HTuple hv_ProgressMin, HTuple hv_ProgressCurrent, 
    HTuple hv_ProgressMax, HTuple *hv_SecondsElapsed, HTuple *hv_SecondsRemaining, 
    HTuple *hv_ProgressPercent, HTuple *hv_ProgressPerSecond)
{

  // Local iconic variables

  // Local control variables
  HTuple  hv_SecondsNow, hv_Epsilon, hv_ProgressRemaining;

  //
  //This procedure estimates the remaining time in seconds,
  //given a start time and a progress value.
  //
  //Get current time.
  CountSeconds(&hv_SecondsNow);
  //
  //Get elapsed time span.
  (*hv_SecondsElapsed) = hv_SecondsNow-hv_SecondsStart;
  //
  //A very small additive constant to avoid division by zero.
  hv_Epsilon = 1e-6;
  //
  //Estimate remaining time based on elapsed time.
  hv_ProgressRemaining = hv_ProgressMax-hv_ProgressCurrent;
  (*hv_ProgressPerSecond) = ((hv_ProgressCurrent-hv_ProgressMin).TupleReal())/(((*hv_SecondsElapsed).TupleReal())+hv_Epsilon);
  (*hv_SecondsRemaining) = hv_ProgressRemaining/((*hv_ProgressPerSecond)+hv_Epsilon);
  //
  //Get current progress in percent.
  (*hv_ProgressPercent) = (100*((hv_ProgressCurrent-hv_ProgressMin).TupleReal()))/(((hv_ProgressMax-hv_ProgressMin).TupleReal())+hv_Epsilon);
  return;
}
