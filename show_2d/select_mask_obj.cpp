///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 23.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// Ensure that the interface encoding is set to locale encoding by calling
// SetHcppInterfaceStringEncodingIsUtf8(false) at the beginning of the program.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////

#include "HalconCpp.h"
#include "HDevThread.h"



using namespace HalconCpp;


// Chapter: Object / Manipulation
// Short Description: Select elements from object arrays using a mask. 
void select_mask_obj (HObject ho_Objects, HObject *ho_SelectedObjects, HTuple hv_Mask)
{

  // Local iconic variables

  // Local control variables
  HTuple  hv_Number, hv_AllNumbers, hv_Indices;

  //select_mask_obj selects one or more single elements of the object array
  //Objects and returns them in SelectedObjects.
  //The elements of Mask determine if the corresponding elements of Objects are selected.
  //If the value is greater than 0, the corresponding element is selected.
  //
  //Check number of elements
  CountObj(ho_Objects, &hv_Number);
  if (0 != (int(hv_Number!=(hv_Mask.TupleLength()))))
  {
    throw HException("Number of elements in Objects and Mask do not match.");
  }
  //
  //Check type of mask elements
  hv_AllNumbers = int((((hv_Mask.TupleIsRealElem()).TupleSum())+((hv_Mask.TupleIsIntElem()).TupleSum()))==(hv_Mask.TupleLength()));
  if (0 != (HTuple(hv_AllNumbers.TupleNot()).TupleAnd(int(hv_Mask!=HTuple()))))
  {
    throw HException("Invalid type: Elements of Mask must be integer or real numbers.");
  }
  //
  //Use select_mask for tuples to generate a list of object indices.
  hv_Indices = HTuple::TupleGenSequence(1,hv_Mask.TupleLength(),1).TupleSelectMask(hv_Mask);
  SelectObj(ho_Objects, &(*ho_SelectedObjects), hv_Indices);
  return;
}
