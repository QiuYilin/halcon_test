///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 23.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// Ensure that the interface encoding is set to locale encoding by calling
// SetHcppInterfaceStringEncodingIsUtf8(false) at the beginning of the program.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////
#include "HalconCpp.h"
#include "HDevThread.h"



using namespace HalconCpp;

// Procedure declarations 
// External procedures 
// Chapter: Graphics / Output
// Short Description: Reflect the pose change that was introduced by the user by moving the mouse 
extern void analyze_graph_event (HObject ho_BackgroundImage, HTuple hv_MouseMapping, 
    HTuple hv_Button, HTuple hv_Row, HTuple hv_Column, HTuple hv_WindowHandle, HTuple hv_WindowHandleBuffer, 
    HTuple hv_VirtualTrackball, HTuple hv_TrackballSize, HTuple hv_SelectedObjectIn, 
    HTuple hv_Scene3D, HTuple hv_AlphaOrig, HTuple hv_ObjectModel3DID, HTuple hv_CamParam, 
    HTuple hv_Labels, HTuple hv_Title, HTuple hv_Information, HTuple hv_GenParamName, 
    HTuple hv_GenParamValue, HTuple hv_PosesIn, HTuple hv_ButtonHoldIn, HTuple hv_TBCenter, 
    HTuple hv_TBSize, HTuple hv_WindowCenteredRotationlIn, HTuple hv_MaxNumModels, 
    HTuple *hv_PosesOut, HTuple *hv_SelectedObjectOut, HTuple *hv_ButtonHoldOut, 
    HTuple *hv_WindowCenteredRotationOut);
// Chapter: Graphics / Parameters
extern void color_string_to_rgb (HTuple hv_Color, HTuple *hv_RGB);
// Chapter: Graphics / Output
// Short Description: Determine the optimum distance of the object to obtain a reasonable visualization 
extern void determine_optimum_pose_distance (HTuple hv_ObjectModel3DID, HTuple hv_CamParam, 
    HTuple hv_ImageCoverage, HTuple hv_PoseIn, HTuple *hv_PoseOut);
// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var, and dev_update_window to 'off'. 
extern void dev_update_off ();
// Chapter: Graphics / Output
// Short Description: Display a continue button. 
extern void disp_continue_button (HTuple hv_WindowHandle);
// Chapter: Graphics / Text
// Short Description: Write one or multiple text messages. 
extern void disp_message (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
    HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box);
// Chapter: Graphics / Output
// Short Description: Replace disp_object_model_3d if there is no OpenGL available. 
extern void disp_object_model_no_opengl (HObject *ho_ModelContours, HTuple hv_ObjectModel3DID, 
    HTuple hv_GenParamName, HTuple hv_GenParamValue, HTuple hv_WindowHandleBuffer, 
    HTuple hv_CamParam, HTuple hv_PosesOut);
// Chapter: Graphics / Text
// Short Description: Display a text message. 
extern void disp_text_button (HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem, 
    HTuple hv_Row, HTuple hv_Column, HTuple hv_TextColor, HTuple hv_ButtonColor);
// Chapter: Graphics / Output
extern void disp_title_and_information (HTuple hv_WindowHandle, HTuple hv_Title, 
    HTuple hv_Information);
// Chapter: Graphics / Output
// Short Description: Render 3D object models in a buffer window. 
extern void dump_image_output (HObject ho_BackgroundImage, HTuple hv_WindowHandleBuffer, 
    HTuple hv_Scene3D, HTuple hv_AlphaOrig, HTuple hv_ObjectModel3DID, HTuple hv_GenParamName, 
    HTuple hv_GenParamValue, HTuple hv_CamParam, HTuple hv_Poses, HTuple hv_ColorImage, 
    HTuple hv_Title, HTuple hv_Information, HTuple hv_Labels, HTuple hv_VisualizeTrackball, 
    HTuple hv_DisplayContinueButton, HTuple hv_TrackballCenterRow, HTuple hv_TrackballCenterCol, 
    HTuple hv_TrackballRadiusPixel, HTuple hv_SelectedObject, HTuple hv_VisualizeRotationCenter, 
    HTuple hv_RotationCenter);
// Chapter: Calibration / Camera Parameters
// Short Description: Generate a camera parameter tuple for an area scan camera with distortions modeled by the division model. 
extern void gen_cam_par_area_scan_division (HTuple hv_Focus, HTuple hv_Kappa, HTuple hv_Sx, 
    HTuple hv_Sy, HTuple hv_Cx, HTuple hv_Cy, HTuple hv_ImageWidth, HTuple hv_ImageHeight, 
    HTuple *hv_CameraParam);
// Chapter: Calibration / Camera Parameters
// Short Description: Get the value of a specified camera parameter from the camera parameter tuple. 
extern void get_cam_par_data (HTuple hv_CameraParam, HTuple hv_ParamName, HTuple *hv_ParamValue);
// Chapter: Calibration / Camera Parameters
// Short Description: Get the names of the parameters in a camera parameter tuple. 
extern void get_cam_par_names (HTuple hv_CameraParam, HTuple *hv_CameraType, HTuple *hv_ParamNames);
// Chapter: Graphics / Output
// Short Description: Compute the center of all given 3D object models. 
extern void get_object_models_center (HTuple hv_ObjectModel3DID, HTuple *hv_Center);
// Chapter: Graphics / Output
// Short Description: Get the center of the virtual trackback that is used to move the camera. 
extern void get_trackball_center (HTuple hv_SelectedObject, HTuple hv_TrackballRadiusPixel, 
    HTuple hv_ObjectModel3D, HTuple hv_Poses, HTuple *hv_TBCenter, HTuple *hv_TBSize);
// Chapter: Graphics / Output
// Short Description: Get the center of the virtual trackback that is used to move the camera (version for inspection_mode = 'surface'). 
extern void get_trackball_center_fixed (HTuple hv_SelectedObject, HTuple hv_TrackballCenterRow, 
    HTuple hv_TrackballCenterCol, HTuple hv_TrackballRadiusPixel, HTuple hv_Scene3D, 
    HTuple hv_ObjectModel3DID, HTuple hv_Poses, HTuple hv_WindowHandleBuffer, HTuple hv_CamParam, 
    HTuple hv_GenParamName, HTuple hv_GenParamValue, HTuple *hv_TBCenter, HTuple *hv_TBSize);
// Chapter: Graphics / Output
// Short Description: Get string extends of several lines. 
extern void max_line_width (HTuple hv_WindowHandle, HTuple hv_Lines, HTuple *hv_MaxWidth);
// Chapter: Graphics / Output
// Short Description: Project an image point onto the trackball 
extern void project_point_on_trackball (HTuple hv_X, HTuple hv_Y, HTuple hv_VirtualTrackball, 
    HTuple hv_TrackballSize, HTuple *hv_V);
// Chapter: Calibration / Camera Parameters
// Short Description: Set the value of a specified camera parameter in the camera parameter tuple. 
extern void set_cam_par_data (HTuple hv_CameraParamIn, HTuple hv_ParamName, HTuple hv_ParamValue, 
    HTuple *hv_CameraParamOut);
// Chapter: Graphics / Text
// Short Description: Set font independent of OS 
extern void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
    HTuple hv_Bold, HTuple hv_Slant);
// Chapter: Graphics / Output
// Short Description: Compute the 3D rotation from the mouse movement 
extern void trackball (HTuple hv_MX1, HTuple hv_MY1, HTuple hv_MX2, HTuple hv_MY2, 
    HTuple hv_VirtualTrackball, HTuple hv_TrackballSize, HTuple hv_SensFactor, HTuple *hv_QuatRotation);
// Chapter: Tuple / Arithmetic
// Short Description: Calculate the cross product of two vectors of length 3. 
extern void tuple_vector_cross_product (HTuple hv_V1, HTuple hv_V2, HTuple *hv_VC);
// Chapter: Graphics / Output
// Short Description: Display 3D object models 
extern void visualize_object_model_3d (HTuple hv_WindowHandle, HTuple hv_ObjectModel3D, 
    HTuple hv_CamParam, HTuple hv_PoseIn, HTuple hv_GenParamName, HTuple hv_GenParamValue, 
    HTuple hv_Title, HTuple hv_Label, HTuple hv_Information, HTuple *hv_PoseOut);
// Local procedures 
void dev_disp_introduction ();
void gen_visualization_title (HTuple hv_BoxInformation, HTuple *hv_Title);

// Procedures 
// Local procedures 
void dev_disp_introduction ()
{

  // Local iconic variables

  // Local control variables
  HTuple  hv_ContinueMessage, hv_Message;

  hv_ContinueMessage = "Press Run (F5) to continue";
  hv_Message.Clear();
  hv_Message[0] = "We want to find the pose of boxes in a 3D scene in order to grip them with a robot.";
  hv_Message[1] = "To accomplish this, we:";
  hv_Message[2] = "    1. Read a scene with a XYZ-mapping,";
  hv_Message[3] = "    2. Create a 3D object model of the scene,";
  hv_Message[4] = "    3. Call find_box_3d and";
  hv_Message[5] = "    4. Visualize the results.";
  hv_Message[6] = "";
  hv_Message[7] = "find_box_3d returns a GrippingPose for each found box that is within the size range";
  hv_Message[8] = "specified in the call to find_box_3d. This GrippingPose can be provided to a hand-eye";
  hv_Message[9] = "calibrated robot to grip the found boxes.";
  hv_Message[10] = "";
  hv_Message[11] = "In most application scenarios, the 3D scene has to be preprocessed in order to find";
  hv_Message[12] = "generic boxes fast and robust. The documentation provides detailed descriptions how to";
  hv_Message[13] = "prepare your data or how to troubleshoot in case of problems.";
  if (HDevWindowStack::IsOpen())
    DispText(HDevWindowStack::GetActive(),hv_Message, "window", "top", "left", "white", 
        "box", "false");
  if (HDevWindowStack::IsOpen())
    DispText(HDevWindowStack::GetActive(),hv_ContinueMessage, "window", "bottom", 
        "right", "black", HTuple(), HTuple());
  return;
}

void gen_visualization_title (HTuple hv_BoxInformation, HTuple *hv_Title)
{

  // Local iconic variables

  // Local control variables
  HTuple  hv_Is2DOnly, hv_BoxResult, hv_BoxIndices;
  HTuple  hv_Index, hv___Tmp_Ctrl_Dict_Init_0;

  hv_Is2DOnly = 1;

  hv_BoxResult = hv_BoxInformation.TupleGetDictTuple("results");
  GetDictParam(hv_BoxResult, "keys", HTuple(), &hv_BoxIndices);

  if (0 != (int((hv_BoxIndices.TupleLength())==0)))
  {
    (*hv_Title) = "No box found.";
  }
  else
  {
    {
    HTuple end_val8 = (hv_BoxIndices.TupleLength())-1;
    HTuple step_val8 = 1;
    for (hv_Index=0; hv_Index.Continue(end_val8, step_val8); hv_Index += step_val8)
    {
      CreateDict(&hv___Tmp_Ctrl_Dict_Init_0);
      SetDictTuple(hv___Tmp_Ctrl_Dict_Init_0, "comp", "true");
      if (0 != ((((hv_BoxResult.TupleGetDictTuple(hv_Index)).TupleConcat(hv___Tmp_Ctrl_Dict_Init_0)).TupleTestEqualDictItem("one_side_only","comp")).TupleNot()))
      {
        hv_Is2DOnly = 0;
        break;
      }
      hv___Tmp_Ctrl_Dict_Init_0 = HTuple::TupleConstant("HNULL");
    }
    }

    if (0 != hv_Is2DOnly)
    {
      (*hv_Title) = "The visible side and the computed gripping pose are displayed for each box found.";
    }
    else
    {
      (*hv_Title) = HTuple("If more than one side of a box is visible, the box can be fully displayed.");
    }
  }

  return;
}

#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{

  // Local control variables
  HTuple  hv_WindowHandle, hv_ObjectModel3D, hv_SampledObjectModel3D;
  HTuple  hv_PoseOut;

  if (HDevWindowStack::IsOpen())
    CloseWindow(HDevWindowStack::Pop());
  SetWindowAttr("background_color","black");
  OpenWindow(0,0,512,512,0,"visible","",&hv_WindowHandle);
  HDevWindowStack::Push(hv_WindowHandle);
  // GenBoxObjectModel3d(((((((HTuple(0).Append(0)).Append(0)).Append(0)).Append(0)).Append(0)).Append(0)), 
  //     3, 2, 1, &hv_ObjectModel3D);
  // SampleObjectModel3d(hv_ObjectModel3D, "fast", 0.05, HTuple(), HTuple(), &hv_SampledObjectModel3D);
  HalconCpp::HTuple  hv_ObjectModel3D1, hv_Status;
  HalconCpp::ReadObjectModel3d("C:\\Users\\qiuyi\\AppData\\Roaming\\MVTec\\HALCON-23.05-Progress\\examples\\3d_models\\pipe_joint.ply", "m", HalconCpp::HTuple(), HalconCpp::HTuple(), &hv_ObjectModel3D1, &hv_Status);
  
  // visualize_object_model_3d(hv_WindowHandle, hv_ObjectModel3D1, HTuple(), HTuple(), 
  //     HTuple(), HTuple(), HTuple(), HTuple(), HTuple(), &hv_PoseOut);
  while(1){
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3D1, HTuple(), HTuple(), 
          HTuple(), HTuple());
  }
}


#ifndef NO_EXPORT_APP_MAIN


int main(int argc, char *argv[])
{
  int ret = 0;

  try
  {
#if defined(_WIN32)
    SetSystem("use_window_thread", "true");
#endif

    // file was stored with local-8-bit encoding
    //   -> set the interface encoding accordingly
    SetHcppInterfaceStringEncodingIsUtf8(false);

    // Default settings used in HDevelop (can be omitted)
    SetSystem("width", 512);
    SetSystem("height", 512);

    action();
  }
  catch (HException &exception)
  {
    fprintf(stderr,"  Error #%u in %s: %s\n", exception.ErrorCode(),
            exception.ProcName().TextA(),
            exception.ErrorMessage().TextA());
    ret = 1;
  }
  return ret;
}

#endif


#endif


