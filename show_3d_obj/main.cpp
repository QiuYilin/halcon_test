///////////////////////////////////////////////////////////////////////////////
// File generated by HDevelop for HALCON/C++ Version 23.05.0.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp936).
// Ensure that the interface encoding is set to locale encoding by calling
// SetHcppInterfaceStringEncodingIsUtf8(false) at the beginning of the program.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
///////////////////////////////////////////////////////////////////////////////
#include "HalconCpp.h"
#include "HDevThread.h"



using namespace HalconCpp;

// Procedure declarations 
// External procedures 
// Chapter: Develop
// Short Description: Switch dev_update_pc, dev_update_var, and dev_update_window to 'off'. 
extern void dev_update_off ();
// Chapter: Calibration / Camera Parameters
// Short Description: Generate a camera parameter tuple for an area scan camera with distortions modeled by the division model. 
extern void gen_cam_par_area_scan_division (HTuple hv_Focus, HTuple hv_Kappa, HTuple hv_Sx, 
    HTuple hv_Sy, HTuple hv_Cx, HTuple hv_Cy, HTuple hv_ImageWidth, HTuple hv_ImageHeight, 
    HTuple *hv_CameraParam);
// Chapter: Calibration / Camera Parameters
// Short Description: Get the value of a specified camera parameter from the camera parameter tuple. 
extern void get_cam_par_data (HTuple hv_CameraParam, HTuple hv_ParamName, HTuple *hv_ParamValue);
// Chapter: Calibration / Camera Parameters
// Short Description: Get the names of the parameters in a camera parameter tuple. 
extern void get_cam_par_names (HTuple hv_CameraParam, HTuple *hv_CameraType, HTuple *hv_ParamNames);
// Chapter: Calibration / Camera Parameters
// Short Description: Set the value of a specified camera parameter in the camera parameter tuple. 
extern void set_cam_par_data (HTuple hv_CameraParamIn, HTuple hv_ParamName, HTuple hv_ParamValue, 
    HTuple *hv_CameraParamOut);
// Chapter: Graphics / Text
// Short Description: Set font independent of OS 
extern void set_display_font (HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font, 
    HTuple hv_Bold, HTuple hv_Slant);

// Procedures 
#ifndef NO_EXPORT_MAIN
// Main procedure 
void action()
{

  // Local iconic variables
  HObject  ho_Image;

  // Local control variables
  HTuple  hv_CameraParam, hv_Pose1, hv_Pose2, hv_Pose3;
  HTuple  hv_ObjPoses, hv_PipeJointOM3DID, hv_Status, hv_ObjectModel3DIDs;
  HTuple  hv_ImageWidth, hv_ImageHeight, hv_WindowHandle;
  HTuple  hv_GenParNames, hv_GenParValues, hv_Kappa, hv_LastTime;
  HTuple  hv_DeltaKappaPerSecond, hv_CurrentTime, hv_DeltaT;
  HTuple  hv_DeltaKappa, hv_LightAmbient, hv_LAPerSecond;
  HTuple  hv_DeltaLA, hv_LightDiffuse, hv_GenParNamesL, hv_LightAmbientString;
  HTuple  hv_LightDiffuseString, hv_GenParValuesL, hv_PointX;
  HTuple  hv_PointY, hv_PointZ, hv_Center, hv_SquaredDist;
  HTuple  hv_DistToCenter, hv_PointSize, hv_DeltaPointSizePerSecond;
  HTuple  hv_DeltaPointSize, hv_GenParNamesPS, hv_GenParValuesPS;
  HTuple  hv_Message, hv_Exception;

  //This example shows how to use the operator disp_object_model_3d to
  //display 3d object models.
  //The example shows the usage of different visualization parameters
  //and requires OpenGL!
  dev_update_off();
  gen_cam_par_area_scan_division(0.025, 0, 1.1e-05, 1.1e-05, 384.0, 288.0, 768, 576, 
      &hv_CameraParam);
  CreatePose(-0.037, 0.026, 0.42, 137, 52, 326, "Rp+T", "gba", "point", &hv_Pose1);
  CreatePose(0.009, -0.011, 0.4, 354, 317, 252, "Rp+T", "gba", "point", &hv_Pose2);
  CreatePose(0.042, 0.01, 0.4, 253, 313, 325, "Rp+T", "gba", "point", &hv_Pose3);
  hv_ObjPoses.Clear();
  hv_ObjPoses.Append(hv_Pose1);
  hv_ObjPoses.Append(hv_Pose2);
  hv_ObjPoses.Append(hv_Pose3);
  ReadObjectModel3d("pipe_joint", "m", "convert_to_triangles", "true", &hv_PipeJointOM3DID, 
      &hv_Status);
  hv_ObjectModel3DIDs.Clear();
  hv_ObjectModel3DIDs.Append(hv_PipeJointOM3DID);
  hv_ObjectModel3DIDs.Append(hv_PipeJointOM3DID);
  hv_ObjectModel3DIDs.Append(hv_PipeJointOM3DID);
  if (HDevWindowStack::IsOpen())
    CloseWindow(HDevWindowStack::Pop());
  get_cam_par_data(hv_CameraParam, "image_width", &hv_ImageWidth);
  get_cam_par_data(hv_CameraParam, "image_height", &hv_ImageHeight);
  SetWindowAttr("background_color","gray");
  OpenWindow(0,0,hv_ImageWidth,hv_ImageHeight,0,"visible","",&hv_WindowHandle);
  HDevWindowStack::Push(hv_WindowHandle);
  set_display_font(hv_WindowHandle, 16, "mono", "true", "false");
  if (HDevWindowStack::IsOpen())
    SetPart(HDevWindowStack::GetActive(),0, 0, hv_ImageHeight-1, hv_ImageWidth-1);
  try
  {
    //
    //Display objects with different colors
    //
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        "colored", 12);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Display objects with different colors", 
          "window", "top", "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Use different distortion coefficients
    //
    hv_GenParNames = "colored";
    hv_GenParValues = 12;
    hv_Kappa = -20000;
    CountSeconds(&hv_LastTime);
    hv_DeltaKappaPerSecond = 15000;
    SetWindowParam(hv_WindowHandle, "flush", "false");
    while (0 != (int(hv_Kappa<10000)))
    {
      CountSeconds(&hv_CurrentTime);
      hv_DeltaT = hv_CurrentTime-hv_LastTime;
      hv_DeltaKappa = hv_DeltaT*hv_DeltaKappaPerSecond;
      hv_Kappa += hv_DeltaKappa;
      hv_LastTime = hv_CurrentTime;
      set_cam_par_data(hv_CameraParam, "kappa", hv_Kappa, &hv_CameraParam);
      DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
          hv_GenParNames, hv_GenParValues);
      if (HDevWindowStack::IsOpen())
        DispText(HDevWindowStack::GetActive(),"disp_object_model_3d takes account of radial distortions", 
            "window", "top", "left", "black", HTuple(), HTuple());
      FlushBuffer(hv_WindowHandle);
    }
    SetWindowParam(hv_WindowHandle, "flush", "true");
    set_cam_par_data(hv_CameraParam, "kappa", 0, &hv_CameraParam);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Set individual object colors
    //
    hv_GenParNames.Clear();
    hv_GenParNames[0] = "color_0";
    hv_GenParNames[1] = "color_1";
    hv_GenParNames[2] = "color_2";
    hv_GenParValues.Clear();
    hv_GenParValues[0] = "yellow";
    hv_GenParValues[1] = "#909090";
    hv_GenParValues[2] = "cyan";
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Set individual colors for each object", 
          "window", "top", "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Set translucency
    //
    hv_GenParNames = hv_GenParNames.TupleConcat("alpha");
    hv_GenParValues = hv_GenParValues.TupleConcat(0.7);
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Set the translucency", "window", "top", 
          "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Control the light source
    //
    hv_LightAmbient = 1.0;
    CountSeconds(&hv_LastTime);
    hv_LAPerSecond = 0.5;
    SetWindowParam(hv_WindowHandle, "flush", "false");
    while (0 != (int(hv_LightAmbient>0.0)))
    {
      CountSeconds(&hv_CurrentTime);
      hv_DeltaT = hv_CurrentTime-hv_LastTime;
      hv_DeltaLA = hv_DeltaT*hv_LAPerSecond;
      hv_LightAmbient = hv_LightAmbient-hv_DeltaLA;
      hv_LightDiffuse = 1.0-hv_LightAmbient;
      hv_LastTime = hv_CurrentTime;
      hv_GenParNamesL.Clear();
      hv_GenParNamesL.Append(hv_GenParNames);
      hv_GenParNamesL.Append("light_ambient");
      hv_GenParNamesL.Append("light_diffuse");
      hv_LightAmbientString = (((hv_LightAmbient+" ")+hv_LightAmbient)+" ")+hv_LightAmbient;
      hv_LightDiffuseString = (((hv_LightDiffuse+" ")+hv_LightDiffuse)+" ")+hv_LightDiffuse;
      hv_GenParValuesL.Clear();
      hv_GenParValuesL.Append(hv_GenParValues);
      hv_GenParValuesL.Append(hv_LightAmbientString);
      hv_GenParValuesL.Append(hv_LightDiffuseString);
      DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
          hv_GenParNamesL, hv_GenParValuesL);
      if (HDevWindowStack::IsOpen())
        DispText(HDevWindowStack::GetActive(),"Control the light source", "window", 
            "top", "left", "black", HTuple(), HTuple());
      FlushBuffer(hv_WindowHandle);
    }
    SetWindowParam(hv_WindowHandle, "flush", "true");
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Visualize poses
    //
    hv_GenParNames = hv_GenParNames.TupleConcat("disp_pose");
    hv_GenParValues = hv_GenParValues.TupleConcat("true");
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Display the poses", "window", "top", 
          "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Visualize lines
    //
    hv_GenParNames = hv_GenParNames.TupleConcat("disp_lines");
    hv_GenParValues = hv_GenParValues.TupleConcat("true");
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Display as wireframe", "window", "top", 
          "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Set a different color for the lines
    //
    hv_GenParNames = hv_GenParNames.TupleConcat("line_color");
    hv_GenParValues = hv_GenParValues.TupleConcat("white");
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Set the color of the lines", "window", 
          "top", "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Visualize points instead of faces
    //
    hv_GenParNames.Clear();
    hv_GenParNames[0] = "colored";
    hv_GenParNames[1] = "attribute";
    hv_GenParValues.Clear();
    hv_GenParValues[0] = 12;
    hv_GenParValues[1] = "points";
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Display points instead of faces", "window", 
          "top", "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Select the attribute that is used for false color visualization
    //
    hv_GenParNames = hv_GenParNames.TupleConcat("color_attrib");
    hv_GenParValues = hv_GenParValues.TupleConcat("coord_x");
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Select attributes as for false color visualization", 
          "window", "top", "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Visualize an extended attribute
    //
    GetObjectModel3dParams(hv_PipeJointOM3DID, "point_coord_x", &hv_PointX);
    GetObjectModel3dParams(hv_PipeJointOM3DID, "point_coord_y", &hv_PointY);
    GetObjectModel3dParams(hv_PipeJointOM3DID, "point_coord_z", &hv_PointZ);
    GetObjectModel3dParams(hv_PipeJointOM3DID, "center", &hv_Center);
    hv_SquaredDist = (((hv_PointX-HTuple(hv_Center[0]))*(hv_PointX-HTuple(hv_Center[0])))+((hv_PointY-HTuple(hv_Center[1]))*(hv_PointY-HTuple(hv_Center[1]))))+((hv_PointZ-HTuple(hv_Center[2]))*(hv_PointZ-HTuple(hv_Center[2])));
    hv_DistToCenter = hv_SquaredDist.TupleSqrt();
    SetObjectModel3dAttribMod(hv_PipeJointOM3DID, "&dist_to_center", "points", hv_DistToCenter);
    hv_GenParNames.Clear();
    hv_GenParNames[0] = "colored";
    hv_GenParNames[1] = "attribute";
    hv_GenParNames[2] = "color_attrib";
    hv_GenParValues.Clear();
    hv_GenParValues[0] = 12;
    hv_GenParValues[1] = "points";
    hv_GenParValues[2] = "&dist_to_center";
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),(HTuple("Visualize an extended attribute").Append("(distance to the center of the point set)")), 
          "window", "top", "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Use a LUT to colorize points
    //
    hv_GenParNames = hv_GenParNames.TupleConcat("lut");
    hv_GenParValues = hv_GenParValues.TupleConcat("temperature");
    DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Use a LUT to colorize the points", "window", 
          "top", "left", "black", HTuple(), HTuple());
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Increase the point size
    //
    hv_PointSize = 3.5;
    CountSeconds(&hv_LastTime);
    hv_DeltaPointSizePerSecond = (25-3.5)/2;
    SetWindowParam(hv_WindowHandle, "flush", "false");
    while (0 != (int(hv_PointSize<25)))
    {
      CountSeconds(&hv_CurrentTime);
      hv_DeltaT = hv_CurrentTime-hv_LastTime;
      hv_DeltaPointSize = hv_DeltaT*hv_DeltaPointSizePerSecond;
      hv_PointSize += hv_DeltaPointSize;
      hv_LastTime = hv_CurrentTime;
      hv_GenParNamesPS.Clear();
      hv_GenParNamesPS.Append(hv_GenParNames);
      hv_GenParNamesPS.Append("point_size");
      hv_GenParValuesPS.Clear();
      hv_GenParValuesPS.Append(hv_GenParValues);
      hv_GenParValuesPS.Append(hv_PointSize);
      DispObjectModel3d(hv_WindowHandle, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
          hv_GenParNamesPS, hv_GenParValuesPS);
      if (HDevWindowStack::IsOpen())
        DispText(HDevWindowStack::GetActive(),"Set the point size", "window", "top", 
            "left", "black", HTuple(), HTuple());
      FlushBuffer(hv_WindowHandle);
    }
    SetWindowParam(hv_WindowHandle, "flush", "true");
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"Press Run (F5) to continue", "window", 
          "bottom", "right", "black", HTuple(), HTuple());
    // stop(...); only in hdevelop
    //
    //Use render_object_model_3d
    //
    //Instead of displaying the scene directly,
    //the scene can be rendered into an image
    //with the operator render_object_model_3d
    //(e.g., if no visualization in a window is
    //needed or the image shall be saved to disc etc.).
    RenderObjectModel3d(&ho_Image, hv_ObjectModel3DIDs, hv_CameraParam, hv_ObjPoses, 
        hv_GenParNames, hv_GenParValues);
    if (HDevWindowStack::IsOpen())
      DispObj(ho_Image, HDevWindowStack::GetActive());
    hv_Message = "Scene rendered with render_object_model_3d";
    hv_Message[1] = "and stored in Image";
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),hv_Message, "window", "top", "left", 
          "black", HTuple(), HTuple());
  }
  // catch (Exception) 
  catch (HException &HDevExpDefaultException)
  {
    HDevExpDefaultException.ToHTuple(&hv_Exception);
    if (HDevWindowStack::IsOpen())
      DispText(HDevWindowStack::GetActive(),"This example requires OpenGL!", "window", 
          "top", "left", "black", HTuple(), HTuple());
  }
  SetWindowParam(hv_WindowHandle, "flush", "true");
  //
}


#ifndef NO_EXPORT_APP_MAIN


int main(int argc, char *argv[])
{
  int ret = 0;

  try
  {
#if defined(_WIN32)
    SetSystem("use_window_thread", "true");
#endif

    // file was stored with local-8-bit encoding
    //   -> set the interface encoding accordingly
    SetHcppInterfaceStringEncodingIsUtf8(false);

    // Default settings used in HDevelop (can be omitted)
    SetSystem("width", 512);
    SetSystem("height", 512);

    action();
  }
  catch (HException &exception)
  {
    fprintf(stderr,"  Error #%u in %s: %s\n", exception.ErrorCode(),
            exception.ProcName().TextA(),
            exception.ErrorMessage().TextA());
    ret = 1;
  }
  return ret;
}

#endif


#endif


